* 算法

** 树
*** 完全二叉树
1. 只允许最后一行不为满
2. 最后一行必须从左到右
3. 最后一行节点间不能有间隔

** 堆
*** 堆的两条性质
1. 必须是完全二叉树
2. 堆序性
| 大根堆 | 父节点大于子节点 |
| 小根堆 | 父节点小于子节点 |
*** 实际形式
从上到下从左到右编号为数组下标

定理:
1. 节点下标为i
2. 左子结点下标为2i+1
3. 右子节点下标为2i+2

*** 操作
1. 维持堆序性
   对每个节点进行排序
#+begin_src
  fn max_heapify<T: Ord>(arr: &mut [T], n: usize, mut i: usize) {
    loop {
        let mut largest = i;
        let left = 2 * i + 1;
        let right = 2 * i + 2;

        if left < n && arr[left] > arr[largest] {
            largest = left;
        }

        if right < n && arr[right] > arr[largest] {
            largest = right;
        }

        if largest != i {
            arr.swap(i, largest);
            i = largest;
        } else {
            break;
        }
    }
}
#+end_src

2. 建堆
   将元素一个个插入堆,并进行维持堆序性
#+begin_src
fn build_max_heap<T: Ord>(arr: &mut [T]) {
    let n = arr.len();
    for i in (0..n / 2).rev() {
        max_heapify(arr, n, i);
    }
}
#+end_src

*** 优先队列
**** 操作
1. 插入队列
2. 弹出最大/最小元素
